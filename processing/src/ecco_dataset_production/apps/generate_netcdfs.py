
import boto3
import json
import logging
import os
import re
import xarray as xr
import urllib

from .. import configuration
from .. import ecco_dataset
from .. import ecco_task


def ecco_make_granule( task, cfg, **kwargs):
    """

    Args:
        task (dict):
        cfg
    """

    #
    # setup:
    #

    #
    # transform:
    #

    if task.is_latlon:

        # TODO...

    elif task.is_native:
        all_variable_datasets = []
        for variable in task.variables():
            ds = ECCOMDSDataset( task=task, variable=variable, cfg=cfg, **kwargs)
            ds.drop_all_variables_except(variable)
            ds.apply_land_mask_to_native_variable(variable)
            # TODO: possible "global DS changes" here...
            all_variable_datasets.append(ds)
    else:
        raise RuntimeError('Could not determine output granule type (latlon or native)')


    #
    # append metadata:
    #


    #
    # write:
    #

    output_granule = xr.merge(all_variable_datasets)



def ecco_gen_for_podaac(tasklist, cfgfile, workingdir, **kwargs):
    """Generate PO.DAAC-ready ECCO dataset(s) for the tasks in tasklist.

    Args:
        tasklist: (Path and) name of json-formatted file containing list of
            ECCO dataset generation task descriptions, generated by
            create_job_task_list. See that function for formats and details.
        cfgfile (str): (Path and) filename of ECCO Dataset Production
            configuration file.
        workingdir (str): Working directory path definition default if explicit
            path definitions are otherwise unassigned in cfgfile.
        **kwargs: Depending on the manner in which ecco_gen_for_podaac is
            invoked, arguments that may also be necessary include:
            keygen (str): If an AWS S3 endpoint is referenced in tasklist and
                ecco_gen_for_podaac is to be invoked from a non-AWS client in an
                SSO environment, keygen can be used to provide the name of a
                requried federated login key generation script (e.g.,
                /usr/local/bin/aws-login-pub.darwin.amd64)
            profile_name (str): Optional profile name to be used in combination
                with keygen (e.g., 'saml-pub', 'default', etc.)

    Returns:
        ECCO dataset(s) to location(s) defined in tasklist.

    """
    log = logging.getLogger(__name__)
    if log_level:
        log.setLevel(log_level)

    log.info('Initializing configuration parameters...')
    cfg = configuration.ECCODatasetProductionConfig(cfgfile=cfgfile)
    cfg.set_default_paths(workingdir)
    log.info('Configuration key value pairs:')
    for k,v in cfg.items():
        log.info('%s: %s', k, v)
    log.info('...done initializing configuration parameters.')

    for task in json.load(open(tasklist)):

        ecco_make_granule(task,cfg,**kwargs)

